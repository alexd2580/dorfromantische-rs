#version 460

layout(local_size_x=8, local_size_y=8) in;

layout(push_constant, std140) uniform PushConstants {
  /**
   * Time in float seconds.
   */
  layout(offset = 0) float time;
};

layout(std140, binding=0) uniform GlobalsBuffer {
    /**
     * Lengths of quadrant buffers.
     */
    ivec4 quadrant_sizes;
};

layout(std140, binding=1) uniform ViewBuffer {
    /**
     * Size of the window.
     */
    ivec2 size;

    /**
     * Field of view in radians.
     */
    float fovy;

    /**
     * Camera position and orientation.
     */
    vec3 origin;
    vec3 right;
    vec3 ahead;
    vec3 up;
} view;

/**
 * Output of the data shader.
 */
layout(rgba32f, binding=6) uniform image2D data;

/**
 * Result image.
 */
layout(rgba32f, binding=7) uniform image2D present;


const float inf = 1.0 / 0.0;
const float pi = 3.141592653589793;
const float epsilon = 0.00001;

#define RUNOFF 0
#define TOO_MANY_STEPS 1
#define UNDEFINED 2
#define SKYBOX 3

#define TRUNK 10
#define TREETOP 11
#define HOUSE_BASE 12
#define HOUSE_ROOF 13
#define FLOOR 14
#define WHEAT 15
#define WATER 16

vec3 material_color_of(int material) {
    switch(material) {
    case RUNOFF:
        return vec3(1, 0, 1);
    case TOO_MANY_STEPS:
        return vec3(0);
    case UNDEFINED:
        return vec3(1, 0, 1);
    case SKYBOX:
        return vec3(0.7, 0.7, 1.0);
    case TRUNK:
        return vec3(0.42, 0.35, 0.25);
    case TREETOP:
        return vec3(0.30, 0.34, 0.17);
    case HOUSE_BASE:
        return vec3(0.89, 0.75, 0.47);
    case HOUSE_ROOF:
        return vec3(0.96, 0.26, 0.26);
    case FLOOR:
        return vec3(0.2);
    case WHEAT:
        return vec3(0.8, 0.6, 0.2);
    case WATER:
        return vec3(0, 0, 0.6);
    }
}

void main(){
    ivec2 iimage_size = ivec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);

    ivec2 ipixel_coords_x = ivec2(gl_GlobalInvocationID.xy);
    ivec2 ipixel_coords_r = ipixel_coords_x + ivec2(1, 0);
    ivec2 ipixel_coords_u = ipixel_coords_x + ivec2(0, -1);

    vec2 uv_x = (2 * vec2(ipixel_coords_x) / iimage_size - 1) * vec2(1, -1);
    vec2 uv_r = (2 * vec2(ipixel_coords_r) / iimage_size - 1) * vec2(1, -1);
    vec2 uv_u = (2 * vec2(ipixel_coords_u) / iimage_size - 1) * vec2(1, -1);

    float aspect_ratio = float(view.size.s) / view.size.t;
    float fov_factor = tan(0.5 * view.fovy);

    vec3 dir_x = normalize(view.ahead + fov_factor * (uv_x.x * aspect_ratio * view.right + uv_x.y * view.up));
    vec3 dir_r = normalize(view.ahead + fov_factor * (uv_r.x * aspect_ratio * view.right + uv_r.y * view.up));
    vec3 dir_u = normalize(view.ahead + fov_factor * (uv_u.x * aspect_ratio * view.right + uv_u.y * view.up));

    vec4 pixel_data = imageLoad(data, ipixel_coords_x);
    float distance_x = pixel_data.x * 500.0;
    vec3 material_color = material_color_of(int(round(pixel_data.z * 100.0)));

    if (distance_x > 100000) {
        imageStore(present, ipixel_coords_x, vec4(material_color, 1));
        return;
    }
    float distance_r = 500.0 * imageLoad(data, ipixel_coords_r).r;
    float distance_u = 500.0 * imageLoad(data, ipixel_coords_u).r;

    vec3 x = dir_x * distance_x;
    vec3 xr = x - distance_r * dir_r;
    vec3 xu = x - distance_u * dir_u;
    vec3 normal = normalize(cross(xr, xu));
    // imageStore(present, ipixel_coords_x, vec4(normal, 1));
    // return;

    // TODO make global.
    // 2 revolutions per minute.
    float light_time = 0.026 * time / (2*pi);
    vec3 light_dir = normalize(vec3(cos(light_time), 1, sin(light_time)));

    float ambient = 0.5;
    float diffuse = max(2.0 * dot(normal, light_dir), 0.0);
    vec3 half_light_view = normalize(light_dir - dir_x);
    float specular = max(1.0 * pow(dot(normal, half_light_view), 200.0), 0.0);
    float lightness = ambient + diffuse + specular;

    float shadow = pixel_data.y * diffuse;
    vec4 frag_color = vec4(material_color * (ambient + shadow), 1);
    // vec4 frag_color = vec4(vec3(diffuse), 1);
    imageStore(present, ipixel_coords_x, frag_color);
}
